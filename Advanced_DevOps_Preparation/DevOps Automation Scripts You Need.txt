Must-Have DevOps Automation Scripts for Everyday Use! 

1Ô∏è‚É£ Automate Docker Container Cleanup üê≥

Unused containers and dangling images take up space. This script helps keep your system clean.

#!/bin/bash
echo "Cleaning up Docker containers, images, and volumes..."
docker system prune -af --volumes

2Ô∏è‚É£ Monitor Kubernetes Pod Status ‚ò∏Ô∏è

Quickly check for non-running pods in your cluster.

#!/bin/bash
echo "Checking for non-running pods..."
kubectl get pods --all-namespaces | grep -v Running

3Ô∏è‚É£ Backup & Restore ETCD in Kubernetes üîÑ

Ensure your cluster's etcd data is safely backed up.

# Backup
ETCDCTL_API=3 etcdctl snapshot save backup.db

# Restore
ETCDCTL_API=3 etcdctl snapshot restore backup.db

4Ô∏è‚É£ Automate AWS EC2 Instance Start/Stop ‚òÅÔ∏è

Save costs by stopping unused instances overnight.

#!/bin/bash
aws ec2 stop-instances --instance-ids i-xxxxxxxxxxxxxxxxx

5Ô∏è‚É£Terraform Plan & Apply Automation üèóÔ∏è

Run Terraform commands in a single script for CI/CD.

#!/bin/bash
terraform init && terraform plan -out=tfplan && terraform apply tfplan


6Ô∏è‚É£ Automate Log File Cleanup üìÇ

Prevent disk space issues by deleting old logs automatically.

#!/bin/bash
echo "Deleting log files older than 7 days..."
find /var/log -type f -name "*.log" -mtime +7 -exec rm -f {} \;

7Ô∏è‚É£ Check SSL Certificate Expiry üîí

Avoid downtime by monitoring SSL certificate expiration.

#!/bin/bash
DOMAIN="yourdomain.com"
echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -enddate

8Ô∏è‚É£ Automate System Package Updates üí°

Keep your Linux system updated without manual intervention.

#!/bin/bash
echo "Updating system packages..."
sudo apt update && sudo apt upgrade -y

9Ô∏è‚É£ Send Alerts for High CPU Usage ‚ö°

Get notified when CPU usage crosses a threshold.

#!/bin/bash
THRESHOLD=80
USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
if (( $(echo "$USAGE > $THRESHOLD" | bc -l) )); then
 echo "High CPU Usage: $USAGE%" | mail -s "CPU Alert" you@example.com
fi

üîü Restart a Failing Kubernetes Pod ‚ò∏Ô∏è

Automatically restart pods stuck in CrashLoopBackOff.

#!/bin/bash
echo "Restarting failed pods..."
kubectl get pods --all-namespaces | grep CrashLoopBackOff | awk '{print $2}' | xargs kubectl delete pod


1Ô∏è‚É£1Ô∏è‚É£ Monitor Disk Usage and Send Alerts üíæ

Prevent storage issues by getting alerts when disk space is low.

#!/bin/bash
THRESHOLD=80
USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$USAGE" -gt "$THRESHOLD" ]; then
 echo "Disk usage is above $THRESHOLD%: $USAGE%" | mail -s "Disk Space Alert" you@example.com
fi

1Ô∏è‚É£2Ô∏è‚É£ Find and Kill High-Memory Processes üî•

Identify and stop processes consuming excessive RAM.

#!/bin/bash
echo "Killing high-memory processes..."
ps aux --sort=-%mem | awk 'NR==2 {print $2}' | xargs kill -9

1Ô∏è‚É£3Ô∏è‚É£ Rotate Nginx Logs Without Downtime üåê

Avoid log overflow by rotating logs safely.

#!/bin/bash
echo "Rotating Nginx logs..."
mv /var/log/nginx/access.log /var/log/nginx/access.log.$(date +%F)
mv /var/log/nginx/error.log /var/log/nginx/error.log.$(date +%F)
nginx -s reload

1Ô∏è‚É£4Ô∏è‚É£ Check and Restart Downed Services üîÑ

Ensure critical services are always running.

#!/bin/bash
SERVICES=("nginx" "mysql" "docker")
for SERVICE in "${SERVICES[@]}"; do
 systemctl is-active --quiet $SERVICE || systemctl restart $SERVICE
done

1Ô∏è‚É£5Ô∏è‚É£ Automate Database Backup üõ°Ô∏è

Backup your MySQL database daily to prevent data loss.

#!/bin/bash
DB_NAME="your_database"
BACKUP_DIR="/backup"
mkdir -p $BACKUP_DIR
mysqldump -u root -pYourPassword $DB_NAME > $BACKUP_DIR/db_backup_$(date +%F).sql


1Ô∏è‚É£6Ô∏è‚É£ Check Open Ports on a Server üîç

Quickly identify open ports to improve security.

#!/bin/bash
echo "Listing open ports..."
netstat -tulnp

1Ô∏è‚É£7Ô∏è‚É£ Sync Files Between Servers Using Rsync üîÑ

Automate file synchronization between remote servers.

#!/bin/bash
rsync -avz -e "ssh -i /path/to/key.pem" /source/directory/ user@remote-server:/destination/directory/

1Ô∏è‚É£8Ô∏è‚É£ Restart a Pod When a Specific Container Fails ‚ò∏Ô∏è

Ensure high availability by auto-restarting failed containers.

#!/bin/bash
POD=$(kubectl get pods --no-headers | grep my-app | awk '{print $1}')
kubectl delete pod $POD

1Ô∏è‚É£9Ô∏è‚É£ Automate System Health Check Report üìä

Monitor CPU, memory, and disk usage in one command.

#!/bin/bash
echo "System Health Report"
echo "---------------------"
echo "CPU Load: $(uptime)"
echo "Memory Usage: $(free -m)"
echo "Disk Usage: $(df -h /)"

2Ô∏è‚É£0Ô∏è‚É£ Enable Auto-Scaling in AWS EC2 ‚òÅÔ∏è

Automatically scale EC2 instances based on CPU usage.

aws autoscaling update-auto-scaling-group --auto-scaling-group-name my-asg --min-size 2 --max-size 10 --desired-capacity 4


2Ô∏è‚É£1Ô∏è‚É£ Check Running Docker Containers & Stop Unused Ones üê≥

Identify active containers and stop unused ones to free up resources.

#!/bin/bash
echo "Currently running containers:"
docker ps
echo "Stopping all unused containers..."
docker container prune -f

2Ô∏è‚É£2Ô∏è‚É£ Monitor and Restart a Downed Web Server üåê

Ensure your web server stays online by checking its status and restarting if needed.

#!/bin/bash
SERVICE="nginx"
if ! systemctl is-active --quiet $SERVICE; then
 echo "$SERVICE is down. Restarting..."
 systemctl restart $SERVICE
fi

2Ô∏è‚É£3Ô∏è‚É£ List IAM Users Without MFA in AWS ‚òÅÔ∏è

Enhance security by identifying IAM users without Multi-Factor Authentication (MFA).

aws iam list-users --query "Users[?!(contains(LoginProfile, 'CreateDate'))].UserName"

2Ô∏è‚É£4Ô∏è‚É£ Clean Up Old Docker Images üóëÔ∏è

Remove images older than 30 days to free up disk space.

#!/bin/bash
echo "Deleting Docker images older than 30 days..."
docker images --format "{{.Repository}} {{.ID}} {{.CreatedSince}}" | awk '$3 ~ /weeks|months/ {print $2}' | xargs docker rmi -f

2Ô∏è‚É£5Ô∏è‚É£ Check and Update Kubernetes Nodes ‚ò∏Ô∏è

Keep your Kubernetes nodes updated by checking outdated ones.

#!/bin/bash
kubectl get nodes -o json | jq -r '.items[] | select(.status.nodeInfo.kubeletVersion != "v1.27.0") | .metadata.name'


3Ô∏è‚É£1Ô∏è‚É£ List All Expired TLS Certificates in Kubernetes üîí

Avoid outages by checking expired Kubernetes secrets containing TLS certificates.

#!/bin/bash
kubectl get secrets --all-namespaces -o json | jq -r '.items[] | select(.type=="kubernetes.io/tls") | .metadata.name + " - " + (.data["tls.crt"] | @base64d | openssl x509 -noout -enddate)'

3Ô∏è‚É£2Ô∏è‚É£ Check Running Processes & Sort by Memory Usage üíæ

Identify processes consuming the most memory.

#!/bin/bash
echo "Top 10 memory-consuming processes:"
ps aux --sort=-%mem | head -11

3Ô∏è‚É£3Ô∏è‚É£ Automatically Restart Stuck Kubernetes Deployments ‚ò∏Ô∏è

Detect and restart deployments stuck in an unhealthy state.

#!/bin/bash
echo "Checking for stuck deployments..."
kubectl get deployments --all-namespaces | grep -v "AVAILABLE" | awk '{print $2}' | xargs kubectl rollout restart deployment

3Ô∏è‚É£4Ô∏è‚É£ Scan a System for Open Ports üîç

Check which ports are open on your machine.

#!/bin/bash
echo "Scanning open ports..."
netstat -tulnp | grep LISTEN

3Ô∏è‚É£5Ô∏è‚É£ Backup & Restore PostgreSQL Database üõ°Ô∏è

Automate database backups to prevent data loss.

# Backup
pg_dump -U postgres -d mydatabase -F c -f /backup/db_backup_$(date +%F).dump

# Restore
pg_restore -U postgres -d mydatabase -c /backup/db_backup_YYYY-MM-DD.dump



3Ô∏è‚É£6Ô∏è‚É£ Scan for Failed Kubernetes Jobs & Restart Them ‚ò∏Ô∏è

Ensure Kubernetes jobs don‚Äôt get stuck in a failed state.

#!/bin/bash
echo "Restarting failed Kubernetes jobs..."
kubectl get jobs --all-namespaces | grep "Failed" | awk '{print $1, $2}' | while read ns job; do
 kubectl delete job $job -n $ns
done



3Ô∏è‚É£7Ô∏è‚É£ Find and Delete Zombie Processes üßü‚Äç‚ôÇÔ∏è

Identify and remove zombie processes to free up resources.

#!/bin/bash
echo "Finding and removing zombie processes..."
ps aux | awk '{ if ($8 ~ /Z/) print $2 }' | xargs kill -9



3Ô∏è‚É£8Ô∏è‚É£ Monitor Available Memory and Alert if Low üö®

Send an alert when free memory drops below a threshold.

#!/bin/bash
THRESHOLD=500 # MB
FREE_MEM=$(free -m | awk '/Mem:/ {print $4}')
if [ "$FREE_MEM" -lt "$THRESHOLD" ]; then
 echo "Low memory alert! Free memory: ${FREE_MEM}MB" | mail -s "Memory Alert" you@example.com
fi



3Ô∏è‚É£9Ô∏è‚É£ Check AWS S3 Bucket Public Access üîí

Ensure no S3 buckets are publicly exposed.

aws s3api list-buckets --query "Buckets[].Name" --output text | while read BUCKET; do
 aws s3api get-bucket-acl --bucket $BUCKET --query "Grants[?Grantee.URI=='https://lnkd.in/gCkVCbzx']"
done



4Ô∏è‚É£0Ô∏è‚É£ Monitor and Auto-Scale Pods in Kubernetes ‚ò∏Ô∏è

Automatically scale a deployment based on CPU usage.

kubectl autoscale deployment my-deployment --cpu-percent=70 --min=2 --max=10




4Ô∏è‚É£1Ô∏è‚É£ Check and Restart Unhealthy Docker Containers üê≥

Automatically restart any container stuck in an unhealthy state.

#!/bin/bash
echo "Checking for unhealthy Docker containers..."
docker ps --filter "health=unhealthy" -q | xargs -r docker restart

4Ô∏è‚É£2Ô∏è‚É£ Find and Delete Unused AWS EBS Volumes ‚òÅÔ∏è

Save costs by removing unattached EBS volumes.

aws ec2 describe-volumes --query "Volumes[?State=='available'].VolumeId" --output text | while read VOLUME; do
 aws ec2 delete-volume --volume-id $VOLUME
done

4Ô∏è‚É£3Ô∏è‚É£ List All Running Pods with High CPU Usage in Kubernetes ‚ò∏Ô∏è

Identify pods consuming excessive CPU resources.

#!/bin/bash
echo "Checking pods with high CPU usage..."
kubectl top pods --all-namespaces | awk '$3 > 500 {print $1, $2, $3}'

4Ô∏è‚É£4Ô∏è‚É£ Backup Nginx Configuration Before Any Change üîÑ

Prevent misconfigurations by automatically backing up Nginx settings.

#!/bin/bash
BACKUP_DIR="/backup/nginx"
mkdir -p $BACKUP_DIR
cp -r /etc/nginx/nginx.conf $BACKUP_DIR/nginx.conf_$(date +%F)

4Ô∏è‚É£5Ô∏è‚É£ Find & List Large Unused Docker Images üóëÔ∏è

Identify and remove large unused images to free up space.

#!/bin/bash
echo "Listing large unused Docker images..."
docker images --format "{{.Repository}}:{{.Tag}} {{.Size}}" | sort -k2 -rh | head -10



4Ô∏è‚É£6Ô∏è‚É£ Automatically Restart Failed Systemd Services üîÑ

Ensure critical services are always running by restarting failed ones.

#!/bin/bash
echo "Restarting failed services..."
systemctl list-units --failed --no-pager | awk 'NR>1 {print $1}' | xargs -r systemctl restart

4Ô∏è‚É£7Ô∏è‚É£ Check AWS EC2 Instances Without Assigned IAM Roles ‚òÅÔ∏è

Identify instances missing IAM roles to avoid permission issues.

aws ec2 describe-instances --query "Reservations[*].Instances[?IamInstanceProfile==null].[InstanceId]" --output text

4Ô∏è‚É£8Ô∏è‚É£ Monitor Kubernetes Node Disk Usage ‚ò∏Ô∏è

Get an overview of disk usage across Kubernetes nodes.

#!/bin/bash
echo "Checking Kubernetes node disk usage..."
kubectl get nodes -o custom-columns="NAME:.metadata.name,DISK:.status.allocatable.ephemeral-storage"

4Ô∏è‚É£9Ô∏è‚É£ Scan & List Open Network Ports on a Linux Server üîç

Find open ports to ensure security and prevent vulnerabilities.

#!/bin/bash
echo "Scanning open network ports..."
ss -tulnp

5Ô∏è‚É£0Ô∏è‚É£ Automatically Purge Old Helm Releases üöÄ

Remove old Helm releases to keep your Kubernetes cluster clean.

#!/bin/bash
echo "Deleting Helm releases older than 30 days..."
helm list --filter '.*' --date | awk '$4 < (systime() - 2592000) {print $1}' | xargs -r helm delete


5Ô∏è‚É£1Ô∏è‚É£ Check SSL Certificate Expiry for a Domain üîí

Avoid downtime by monitoring SSL certificate expiration.

#!/bin/bash
DOMAIN="example.com"
echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -enddate

5Ô∏è‚É£2Ô∏è‚É£ Identify Large Log Files Consuming Disk Space üíæ

Find and manage oversized log files before they fill up your disk.

#!/bin/bash
echo "Finding log files larger than 500MB..."
find /var/log -type f -size +500M -exec ls -lh {} \;

5Ô∏è‚É£3Ô∏è‚É£ Restart Kubernetes Pods with High Memory Usage ‚ò∏Ô∏è

Ensure stability by restarting pods that consume excessive memory.

#!/bin/bash
echo "Restarting pods with high memory usage..."
kubectl top pods --all-namespaces | awk '$3 > 500 {print $2}' | xargs kubectl delete pod

5Ô∏è‚É£4Ô∏è‚É£ Check Unused Security Groups in AWS ‚òÅÔ∏è

Identify security groups that are not attached to any instances.

aws ec2 describe-security-groups --query "SecurityGroups[*].GroupId" --output text | while read SG; do
 aws ec2 describe-instances --filters "Name=instance.group-id,Values=$SG" --query "Reservations[*].Instances[*].InstanceId" --output text | grep -q . || echo "Unused: $SG"
done

5Ô∏è‚É£5Ô∏è‚É£ Automate Daily Backup for a Directory üîÑ

Keep your critical files safe by scheduling daily backups.

#!/bin/bash
SRC_DIR="/important/data"
BACKUP_DIR="/backup"
mkdir -p $BACKUP_DIR
tar -czf $BACKUP_DIR/backup_$(date +%F).tar.gz $SRC_DIR


